from msilib.schema import Font
import pygame
import math 

pygame.init()

WIDTH, HEIGHT = 600, 600
WHITE = (255, 255, 255)
BLUE = (100, 149, 237)
BLUE2 = (0, 0, 255)
YELLOW = (255, 255, 0)
RED = (188, 39, 50)
BLACK = (0, 0, 0)
DARK_GREY = (80, 78, 81)
GOLD = (205, 149, 12)


FPS = 60
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
FONT = pygame.font.SysFont("comicsans", 16)

pygame.display.set_caption("Planet Simulation")

class Planet:
    AU = 149.6e6 * 1000 # 單位:公尺
    G = 6.67428e-11
    SCALE = 100 / AU
    TIMESTEP = 3600 * 24 # 一天

    def __init__ (self, x, y, color, radius, mass):
        self.x = x
        self.y = y
        self.color = color
        self.radius = radius
        self.mass = mass

        self.orbit = []
        self.sun = False
        self.distance_to_sun = 0

        # x和y方向的速度
        self.x_vel = 0
        self.y_vel = 0
    
    def draw(self, win):
        x = self.x * self.SCALE + WIDTH/2
        y = self.y * self.SCALE + HEIGHT/2
        updated_points = []
        if len(self.orbit) >2 :
            for point in self.orbit:
                x, y = point
                x = x * self.SCALE + WIDTH/2
                y = y * self.SCALE + HEIGHT/2
                updated_points.append((x, y))
            pygame.draw.lines(win, self.color, False, updated_points, 2)
            pygame.draw.circle(win, self.color, (x, y), self.radius)
        if not self.sun:
            distance_text = FONT.render(f"{round(self.distance_to_sun/1000, 1)}km", 1, WHITE)
            win.blit(distance_text, (x - distance_text.get_width()/2, y - distance_text.get_height()/2))
        
    def attraction(self, other):
        #計算兩星球間的距離
        other_x, other_y = other.x, other.y
        distance_x = other_x - self.x
        distance_y = other_y - self.y
        distance = math.sqrt(distance_x ** 2 + distance_y ** 2) 

        if other.sun :
            self.distance_to_sun = distance

        #計算引力
        force = self.G * self.mass * other.mass / distance ** 2 
        theta = math.atan2(distance_y, distance_x)
        #計算X與Y方向的引力
        force_x = math.cos(theta) * force
        force_y = math.sin(theta) * force
        return force_x, force_y
    
    def update_position(self, planets):
        total_fx = total_fy = 0

        for planet in planets:
            if self == planet:
                continue
            fx, fy = self.attraction(planet)
            total_fx += fx
            total_fy += fy
        
        self.x_vel += total_fx / self.mass * self.TIMESTEP
        self.y_vel += total_fy / self.mass * self.TIMESTEP 

        self.x += self.x_vel * self.TIMESTEP
        self.y += self.y_vel * self.TIMESTEP
        self.orbit.append((self.x, self.y)) 
    

        
def main():
    run = True
    clock = pygame.time.Clock()

    sun = Planet(0, 0, YELLOW, 30, 1.98892 * 10**30)
    sun.sun = True

    earth = Planet(-1 * Planet.AU, 0, BLUE, 16, 5.9742 * 10**24)
    earth.y_vel =  29.783 *1000

    mars = Planet(-1.524 * Planet.AU, 0, RED, 12, 6.39 * 10**23 )
    mars.y_vel = 24.077 * 1000

    mercury = Planet(0.387 * Planet.AU, 0, DARK_GREY, 8, 3.3 * 10**23 )
    mercury.y_vel = -47.4 * 1000

    venus = Planet(0.723 * Planet.AU, 0, WHITE, 14, 4.8685 * 10**24)
    venus.y_vel = -35.02 * 1000

    jupiter = Planet(5.2 * Planet.AU, 0, GOLD, 100, 1.898 * 10**27  )
    jupiter.y_vel = -13.07 * 1000

    neptune = Planet(30.1*Planet.AU, 0, BLUE2, 57.7, 1.024 * 10**26  )

    planets = [sun, earth, mars, mercury, venus ] # 利用列表以方便增加其他星球

    while run:
        clock.tick(FPS)
        WIN.fill(BLACK)
        
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                
        for planet in planets:
            planet.update_position(planets)
            planet.draw(WIN)

        pygame.display.update() 

    pygame.quit()               
main()
